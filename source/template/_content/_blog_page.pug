include ../_blocks/_first-screen_block_blog

section.blog.clearfix
    aside.blog__left
        div.blog__left_btn
        ul.blog__list
            li.blog__item.blog__item_active
                a.blog__link(href="#") Как быть начинающим разработчиком и не сойти с ума
            li.blog__item
                a.blog__link(href="#") Jade — препроцессор HTML
            li.blog__item
                a.blog__link(href="#") Самый необходимый набор Gulp - плагинов
            li.blog__item
                a.blog__link(href="#") 10 советов начинающему веб-разработчику

    div.blog__right
        article.article
            h2.article__title Как быть начинающим разработчиком и не сойти с ума
            div.article__date 22 декабря 2016 года
            div.article__text
                p Не сравнивай
                p.
                    Первые месяцы начинающий разработчик сильно переживает, что в команде есть люди моложе или равные
                    по возрасту, но уже работающие гораздо эффективнее и знающие в разы больше. Сравнивать себя с ними
                    — тупиковый путь, и ни к чему хорошему он не приведёт. Гораздо лучше сравнивать себя сегодняшнего с
                    собой вчерашним. Если делаешь то, что ещё недавно считал слишком сложным для себя, то ты растёшь,
                    и это отлично.
                p Не отвлекайся
                p.
                    Как это обычно бывает: о, почитаю про grid’ы, потом зайду на ютуб, там вышел новый курс по
                    Gulp от Кантора, а потом в твиттере опубликовали ссылку на новую JS-библиотеку. Основы PHP, сделай
                    свой интернет-магазин на Ruby on Rails, новый курс по React…
                p.
                    В результате получается посредственный разработчик, который что-то где-то слышал,
                    но не имеет полноценного понимания и не в состоянии выдать качественный результат.
                    Решением является составление детального плана обучения. Это не значит, что не надо
                    читать новости, просто стоит сократить количество и внимание, уделяемое им. Рекомендую
                    посмотреть это. Особенно полезно про концентрацию.Вернёмся к плану. Для фронтенд-разработчиков
                    последовательность очевидна — качественная адаптивная вёрстка, вся теория по ES 2015, можно
                    немного jQuery и уже только потом популярные фреймворки. Не стоит гнаться за модой и
                    спешить изучать тот же React. Почему? На этот вопрос уже неплохо ответили тут. Многие из
                    моих знакомых начинали другим путём и всё равно приходили к тому, что надо последовательно обучаться.
                p Прими тот факт, что ты будешь много косячить
                p.
                    Тебе предстоит ошибаться и ошибаться много. Недавно я испортил репозиторий
                    с недельной работой своих товарищей. Можно только представить мой уровень «радости».
                    К счастью, коллеги смогли восстановить всё без долгих затрат времени и сил.

        article.article
            h2.article__title Jade — препроцессор HTML
            div.article__date 22 ноября 2016 года
            div.article__text
                p Пересмотрел свое отношение к препроцессорам HTML вроде HAML, Slim, Jade.
                p.
                    Сейчас использую Jade, который, к сожалению, изменил столь прекрасное название
                    из-за юридических заморочек и был переименован в Pug. Итак впечатления наилучшие,
                    работать стало удобнее. Теперь вместо разворачивания тегов с помощью Emmet, подобный
                    код просто записывается в файлики .jade и обрабатывается gulp в полноценный .html.
                    Также в качестве эксперимента синтаксис SCSS изменен на SASS, тоже использующий индентацию.
                p.
                    Под Ruby Slim будет получше HAML и уж точно в разы лучше ERB (HTML). Также как и в случае
                    с SASS/LESS/Stylus нужно уже отлично знать HTML, прежде чем приступать к препроцессорам.


        article.article
            h2.article__title Самый необходимый набор Gulp - плагинов
            div.article__date 14 ноября 2016 года
            div.article__text
                p.
                    Доброго времени суток, всем! Кто-то умный, не помню в какой статье именно на Хабре,
                    буквально недавно размышлял о процессе разработки с явным призывом автоматизировать все,
                    что только можно автоматизировать. И лучше один раз потратить время на автоматизацию,
                    чтобы потом экономить его на протяжении всего проекта.
                p.
                    У веб-разработчиков есть прекрасный инструмент для автоматизации массы задач, который
                     называется Gulp. И моя страсть к таксономии заставила себя собрать огромную коллекцию
                     почти из 100 ценных плагинов для этого сборщика. Думаю многие кто уже использует Gulp
                     найдут для себя что-то нужное, а кто нет, глядя на возможности, получит хорошую мотивацию
                     установить его и понять как эта штука работает.
                p.
                    HTML&CSS
                p.
                    autoprefixer — один из самых полезных плагинов, который автоматически расставляет
                    префиксы к CSS свойствам, исходя из статистики caniuse. Важно сказать, что Автопрефиксер
                    это лишь один из множества дополнений в рамках проекта PostCSS от Злых Марсиан.
                p.
                    gulp-browser-sync — вероятно, самый нужный инструмент, с точки зрения повышения
                    продуктивности веб-разработчиков. BrowserSync создает подключение, после чего производит
                    автообновление страницы во всех браузерах на всех устройствах при изменениями не только
                    клиентских или даже серверных файлов. А плюс ко всему синхронизирует позицию скроллинга
                    и заполненные данные в формах.
                p.
                    gulp-useref — парсит специфичные блоки и конкатенирует описанные в них стили и скрипты.
                p.
                    gulp-email-design — бесценный инструмент при верстки писем, который переводит все CSS
                    стили в инлайновые, автоматически изменяя все пути к файлам, опционально умеет загружать
                    изображения на CDN и даже отсылать письма на почту.
                p.
                    gulp-uncss — лучшее решение для оптимизации CSS файлов. Плагин анализирует HTML код и
                    находит все неиспользуемые и продублированные стили.
                p.
                    gulp-csso — отличный CSS минификатор. На сегодняшний день существует целый ряд CSS
                    компрессоров и сравнительная таблица (GitHub) по ним.

        article.article
            h2.article__title 10 советов начинающему веб-разработчику
            div.article__date 10 ноября 2016 года
            div.article__text
                p.
                    Хорошо, когда работаешь с человеком, который отлично знает толк в своём деле. А что,
                    если случается работать с коллегой, опыт которого не столь большой. Особенно это
                    касается профессионально-личностных качеств. Невольно приходится подсказывать, местами
                    помогать ему, а где-то даже откровенно учить. Все мы когда-то начинали.
                    Все эти действия требуют немалых усилий, которые можно было бы применить по прямому
                    назначению — в разработке проекта, но без подготовки новых специалистов будет тяжелее.
                p.
                    Так вот, чтобы минимизировать эти затраты, давайте «создадим» хорошего, а возможно и
                    идеального начинающего программиста, с высоким потенциалом и светлыми горизонтами.
                p.
                    1. Будьте самостоятельными
                p.
                    2. Умейте спрашивать
                p.
                    3. Постоянно развивайтесь
                p.
                    4. Не бойтесь учиться оценивать
                p.
                    5. Не забывайте о всей картине системы
                p.
                    6. В меру используйте готовые решения
                p.
                    7. Цените свой труд
                p.
                    8. Не будьте ленивыми
                p.
                    9. Умейте правильно излагать свои мысли
                p.
                    10. Не ограничивайтесь своей ролью

    include ../_blocks/_footer

